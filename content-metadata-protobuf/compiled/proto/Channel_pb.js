/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.muthu.other.AssetsMetadata', null, global);
goog.exportSymbol('proto.muthu.other.ChannelCategoryMetadata', null, global);
goog.exportSymbol('proto.muthu.other.ChannelCreationParametersMetadata', null, global);
goog.exportSymbol('proto.muthu.other.ChannelMetadata', null, global);
goog.exportSymbol('proto.muthu.other.NewAssetMetadata', null, global);
goog.exportSymbol('proto.muthu.other.Upload', null, global);
goog.exportSymbol('proto.muthu.other.Urls', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.muthu.other.ChannelMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.muthu.other.ChannelMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.muthu.other.ChannelMetadata.displayName = 'proto.muthu.other.ChannelMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.muthu.other.ChannelMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.muthu.other.ChannelMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.muthu.other.ChannelMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.ChannelMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getField(msg, 1),
    description: jspb.Message.getField(msg, 2),
    isPublic: jspb.Message.getField(msg, 3),
    language: jspb.Message.getField(msg, 4),
    coverPhoto: jspb.Message.getField(msg, 5),
    avatarPhoto: jspb.Message.getField(msg, 6),
    category: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.muthu.other.ChannelMetadata}
 */
proto.muthu.other.ChannelMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.muthu.other.ChannelMetadata;
  return proto.muthu.other.ChannelMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.muthu.other.ChannelMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.muthu.other.ChannelMetadata}
 */
proto.muthu.other.ChannelMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPublic(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoverPhoto(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvatarPhoto(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.muthu.other.ChannelMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.muthu.other.ChannelMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.muthu.other.ChannelMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.ChannelMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.muthu.other.ChannelMetadata.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.muthu.other.ChannelMetadata.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.muthu.other.ChannelMetadata.prototype.clearTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.muthu.other.ChannelMetadata.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.muthu.other.ChannelMetadata.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.muthu.other.ChannelMetadata.prototype.clearDescription = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_public = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.getIsPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.muthu.other.ChannelMetadata.prototype.setIsPublic = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.muthu.other.ChannelMetadata.prototype.clearIsPublic = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.hasIsPublic = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string language = 4;
 * @return {string}
 */
proto.muthu.other.ChannelMetadata.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.muthu.other.ChannelMetadata.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.muthu.other.ChannelMetadata.prototype.clearLanguage = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.hasLanguage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 cover_photo = 5;
 * @return {number}
 */
proto.muthu.other.ChannelMetadata.prototype.getCoverPhoto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.muthu.other.ChannelMetadata.prototype.setCoverPhoto = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.muthu.other.ChannelMetadata.prototype.clearCoverPhoto = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.hasCoverPhoto = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 avatar_photo = 6;
 * @return {number}
 */
proto.muthu.other.ChannelMetadata.prototype.getAvatarPhoto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.muthu.other.ChannelMetadata.prototype.setAvatarPhoto = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.muthu.other.ChannelMetadata.prototype.clearAvatarPhoto = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.hasAvatarPhoto = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 category = 7;
 * @return {number}
 */
proto.muthu.other.ChannelMetadata.prototype.getCategory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.muthu.other.ChannelMetadata.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.muthu.other.ChannelMetadata.prototype.clearCategory = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelMetadata.prototype.hasCategory = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.muthu.other.ChannelCategoryMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.muthu.other.ChannelCategoryMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.muthu.other.ChannelCategoryMetadata.displayName = 'proto.muthu.other.ChannelCategoryMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.muthu.other.ChannelCategoryMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.muthu.other.ChannelCategoryMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.muthu.other.ChannelCategoryMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.ChannelCategoryMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.muthu.other.ChannelCategoryMetadata}
 */
proto.muthu.other.ChannelCategoryMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.muthu.other.ChannelCategoryMetadata;
  return proto.muthu.other.ChannelCategoryMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.muthu.other.ChannelCategoryMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.muthu.other.ChannelCategoryMetadata}
 */
proto.muthu.other.ChannelCategoryMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.muthu.other.ChannelCategoryMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.muthu.other.ChannelCategoryMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.muthu.other.ChannelCategoryMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.ChannelCategoryMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.muthu.other.ChannelCategoryMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.muthu.other.ChannelCategoryMetadata.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.muthu.other.ChannelCategoryMetadata.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelCategoryMetadata.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.muthu.other.Upload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.muthu.other.Upload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.muthu.other.Upload.displayName = 'proto.muthu.other.Upload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.muthu.other.Upload.prototype.toObject = function(opt_includeInstance) {
  return proto.muthu.other.Upload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.muthu.other.Upload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.Upload.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentId: jspb.Message.getField(msg, 1),
    typeId: jspb.Message.getField(msg, 2),
    size: jspb.Message.getField(msg, 3),
    ipfsContentId: msg.getIpfsContentId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.muthu.other.Upload}
 */
proto.muthu.other.Upload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.muthu.other.Upload;
  return proto.muthu.other.Upload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.muthu.other.Upload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.muthu.other.Upload}
 */
proto.muthu.other.Upload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContentId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTypeId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIpfsContentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.muthu.other.Upload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.muthu.other.Upload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.muthu.other.Upload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.Upload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 content_id = 1;
 * @return {number}
 */
proto.muthu.other.Upload.prototype.getContentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.muthu.other.Upload.prototype.setContentId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.muthu.other.Upload.prototype.clearContentId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.Upload.prototype.hasContentId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 type_id = 2;
 * @return {number}
 */
proto.muthu.other.Upload.prototype.getTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.muthu.other.Upload.prototype.setTypeId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.muthu.other.Upload.prototype.clearTypeId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.Upload.prototype.hasTypeId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.muthu.other.Upload.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.muthu.other.Upload.prototype.setSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.muthu.other.Upload.prototype.clearSize = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.Upload.prototype.hasSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes ipfs_content_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.muthu.other.Upload.prototype.getIpfsContentId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ipfs_content_id = 4;
 * This is a type-conversion wrapper around `getIpfsContentId()`
 * @return {string}
 */
proto.muthu.other.Upload.prototype.getIpfsContentId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIpfsContentId()));
};


/**
 * optional bytes ipfs_content_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpfsContentId()`
 * @return {!Uint8Array}
 */
proto.muthu.other.Upload.prototype.getIpfsContentId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIpfsContentId()));
};


/** @param {!(string|Uint8Array)} value */
proto.muthu.other.Upload.prototype.setIpfsContentId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.muthu.other.Upload.prototype.clearIpfsContentId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.Upload.prototype.hasIpfsContentId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.muthu.other.Urls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.muthu.other.Urls.repeatedFields_, null);
};
goog.inherits(proto.muthu.other.Urls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.muthu.other.Urls.displayName = 'proto.muthu.other.Urls';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.muthu.other.Urls.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.muthu.other.Urls.prototype.toObject = function(opt_includeInstance) {
  return proto.muthu.other.Urls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.muthu.other.Urls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.Urls.toObject = function(includeInstance, msg) {
  var f, obj = {
    urlsList: msg.getUrlsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.muthu.other.Urls}
 */
proto.muthu.other.Urls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.muthu.other.Urls;
  return proto.muthu.other.Urls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.muthu.other.Urls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.muthu.other.Urls}
 */
proto.muthu.other.Urls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.muthu.other.Urls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.muthu.other.Urls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.muthu.other.Urls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.Urls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes urls = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.muthu.other.Urls.prototype.getUrlsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes urls = 1;
 * This is a type-conversion wrapper around `getUrlsList()`
 * @return {!Array<string>}
 */
proto.muthu.other.Urls.prototype.getUrlsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getUrlsList()));
};


/**
 * repeated bytes urls = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUrlsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.muthu.other.Urls.prototype.getUrlsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getUrlsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.muthu.other.Urls.prototype.setUrlsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.muthu.other.Urls.prototype.addUrls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.muthu.other.Urls.prototype.clearUrlsList = function() {
  this.setUrlsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.muthu.other.NewAssetMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.muthu.other.NewAssetMetadata.oneofGroups_);
};
goog.inherits(proto.muthu.other.NewAssetMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.muthu.other.NewAssetMetadata.displayName = 'proto.muthu.other.NewAssetMetadata';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.muthu.other.NewAssetMetadata.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.muthu.other.NewAssetMetadata.NewAssetCase = {
  NEW_ASSET_NOT_SET: 0,
  UPLOAD: 1,
  URLS: 2
};

/**
 * @return {proto.muthu.other.NewAssetMetadata.NewAssetCase}
 */
proto.muthu.other.NewAssetMetadata.prototype.getNewAssetCase = function() {
  return /** @type {proto.muthu.other.NewAssetMetadata.NewAssetCase} */(jspb.Message.computeOneofCase(this, proto.muthu.other.NewAssetMetadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.muthu.other.NewAssetMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.muthu.other.NewAssetMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.muthu.other.NewAssetMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.NewAssetMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    upload: (f = msg.getUpload()) && proto.muthu.other.Upload.toObject(includeInstance, f),
    urls: (f = msg.getUrls()) && proto.muthu.other.Urls.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.muthu.other.NewAssetMetadata}
 */
proto.muthu.other.NewAssetMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.muthu.other.NewAssetMetadata;
  return proto.muthu.other.NewAssetMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.muthu.other.NewAssetMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.muthu.other.NewAssetMetadata}
 */
proto.muthu.other.NewAssetMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.muthu.other.Upload;
      reader.readMessage(value,proto.muthu.other.Upload.deserializeBinaryFromReader);
      msg.setUpload(value);
      break;
    case 2:
      var value = new proto.muthu.other.Urls;
      reader.readMessage(value,proto.muthu.other.Urls.deserializeBinaryFromReader);
      msg.setUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.muthu.other.NewAssetMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.muthu.other.NewAssetMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.muthu.other.NewAssetMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.NewAssetMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.muthu.other.Upload.serializeBinaryToWriter
    );
  }
  f = message.getUrls();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.muthu.other.Urls.serializeBinaryToWriter
    );
  }
};


/**
 * optional Upload upload = 1;
 * @return {?proto.muthu.other.Upload}
 */
proto.muthu.other.NewAssetMetadata.prototype.getUpload = function() {
  return /** @type{?proto.muthu.other.Upload} */ (
    jspb.Message.getWrapperField(this, proto.muthu.other.Upload, 1));
};


/** @param {?proto.muthu.other.Upload|undefined} value */
proto.muthu.other.NewAssetMetadata.prototype.setUpload = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.muthu.other.NewAssetMetadata.oneofGroups_[0], value);
};


proto.muthu.other.NewAssetMetadata.prototype.clearUpload = function() {
  this.setUpload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.NewAssetMetadata.prototype.hasUpload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Urls urls = 2;
 * @return {?proto.muthu.other.Urls}
 */
proto.muthu.other.NewAssetMetadata.prototype.getUrls = function() {
  return /** @type{?proto.muthu.other.Urls} */ (
    jspb.Message.getWrapperField(this, proto.muthu.other.Urls, 2));
};


/** @param {?proto.muthu.other.Urls|undefined} value */
proto.muthu.other.NewAssetMetadata.prototype.setUrls = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.muthu.other.NewAssetMetadata.oneofGroups_[0], value);
};


proto.muthu.other.NewAssetMetadata.prototype.clearUrls = function() {
  this.setUrls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.NewAssetMetadata.prototype.hasUrls = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.muthu.other.AssetsMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.muthu.other.AssetsMetadata.repeatedFields_, null);
};
goog.inherits(proto.muthu.other.AssetsMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.muthu.other.AssetsMetadata.displayName = 'proto.muthu.other.AssetsMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.muthu.other.AssetsMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.muthu.other.AssetsMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.muthu.other.AssetsMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.muthu.other.AssetsMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.AssetsMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    newAssetList: jspb.Message.toObjectList(msg.getNewAssetList(),
    proto.muthu.other.NewAssetMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.muthu.other.AssetsMetadata}
 */
proto.muthu.other.AssetsMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.muthu.other.AssetsMetadata;
  return proto.muthu.other.AssetsMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.muthu.other.AssetsMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.muthu.other.AssetsMetadata}
 */
proto.muthu.other.AssetsMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.muthu.other.NewAssetMetadata;
      reader.readMessage(value,proto.muthu.other.NewAssetMetadata.deserializeBinaryFromReader);
      msg.addNewAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.muthu.other.AssetsMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.muthu.other.AssetsMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.muthu.other.AssetsMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.AssetsMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewAssetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.muthu.other.NewAssetMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NewAssetMetadata new_asset = 1;
 * @return {!Array<!proto.muthu.other.NewAssetMetadata>}
 */
proto.muthu.other.AssetsMetadata.prototype.getNewAssetList = function() {
  return /** @type{!Array<!proto.muthu.other.NewAssetMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.muthu.other.NewAssetMetadata, 1));
};


/** @param {!Array<!proto.muthu.other.NewAssetMetadata>} value */
proto.muthu.other.AssetsMetadata.prototype.setNewAssetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.muthu.other.NewAssetMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.muthu.other.NewAssetMetadata}
 */
proto.muthu.other.AssetsMetadata.prototype.addNewAsset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.muthu.other.NewAssetMetadata, opt_index);
};


proto.muthu.other.AssetsMetadata.prototype.clearNewAssetList = function() {
  this.setNewAssetList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.muthu.other.ChannelCreationParametersMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.muthu.other.ChannelCreationParametersMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.muthu.other.ChannelCreationParametersMetadata.displayName = 'proto.muthu.other.ChannelCreationParametersMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.muthu.other.ChannelCreationParametersMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.muthu.other.ChannelCreationParametersMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.ChannelCreationParametersMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    assets: (f = msg.getAssets()) && proto.muthu.other.AssetsMetadata.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.muthu.other.ChannelMetadata.toObject(includeInstance, f),
    rewardAccount: msg.getRewardAccount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.muthu.other.ChannelCreationParametersMetadata}
 */
proto.muthu.other.ChannelCreationParametersMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.muthu.other.ChannelCreationParametersMetadata;
  return proto.muthu.other.ChannelCreationParametersMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.muthu.other.ChannelCreationParametersMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.muthu.other.ChannelCreationParametersMetadata}
 */
proto.muthu.other.ChannelCreationParametersMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.muthu.other.AssetsMetadata;
      reader.readMessage(value,proto.muthu.other.AssetsMetadata.deserializeBinaryFromReader);
      msg.setAssets(value);
      break;
    case 2:
      var value = new proto.muthu.other.ChannelMetadata;
      reader.readMessage(value,proto.muthu.other.ChannelMetadata.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRewardAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.muthu.other.ChannelCreationParametersMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.muthu.other.ChannelCreationParametersMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.muthu.other.ChannelCreationParametersMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssets();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.muthu.other.AssetsMetadata.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.muthu.other.ChannelMetadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional AssetsMetadata assets = 1;
 * @return {?proto.muthu.other.AssetsMetadata}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.getAssets = function() {
  return /** @type{?proto.muthu.other.AssetsMetadata} */ (
    jspb.Message.getWrapperField(this, proto.muthu.other.AssetsMetadata, 1));
};


/** @param {?proto.muthu.other.AssetsMetadata|undefined} value */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.setAssets = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.muthu.other.ChannelCreationParametersMetadata.prototype.clearAssets = function() {
  this.setAssets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.hasAssets = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelMetadata meta = 2;
 * @return {?proto.muthu.other.ChannelMetadata}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.getMeta = function() {
  return /** @type{?proto.muthu.other.ChannelMetadata} */ (
    jspb.Message.getWrapperField(this, proto.muthu.other.ChannelMetadata, 2));
};


/** @param {?proto.muthu.other.ChannelMetadata|undefined} value */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.setMeta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.muthu.other.ChannelCreationParametersMetadata.prototype.clearMeta = function() {
  this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes reward_account = 3;
 * @return {!(string|Uint8Array)}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.getRewardAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes reward_account = 3;
 * This is a type-conversion wrapper around `getRewardAccount()`
 * @return {string}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.getRewardAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRewardAccount()));
};


/**
 * optional bytes reward_account = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRewardAccount()`
 * @return {!Uint8Array}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.getRewardAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRewardAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.setRewardAccount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.muthu.other.ChannelCreationParametersMetadata.prototype.clearRewardAccount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.muthu.other.ChannelCreationParametersMetadata.prototype.hasRewardAccount = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.muthu.other);
